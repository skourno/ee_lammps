from readUt    import clean_and_split
from atom      import atom
from molecule  import bond, angle, molecule
from molSys    import Mol_System  
from copy      import deepcopy

import numpy as np
import sys

class data_lammps:
	"""This class reads and stores data files from lammps"""
	NAtoms      = 0
	NBonds      = 0
	NAngles     = 0
	NAtomTypes  = 0
	NBondTypes  = 0
	NAngleTypes = 0

	Box_lo      = np.zeros(3,np.double)
	Box_hi      = np.zeros(3,np.double)

	At          = []
	Bnd         = []
	Ang         = []

	def __init__(self,DataFilePath):
		"""
		Initialize with just the file path to the lammps data file.

		If you want to generate an data_lammps object without reading 
		a file, you can just give an empty string as an argument and
		an empty object of this type will be returned istead
		"""
		if (DataFilePath == ''):
			pass
		else:
			DataFile = open(DataFilePath,"r")
	
			self.__read_generalInfo(DataFile)
	
			while True:
				line = DataFile.readline()
	
				if not line:
					DataFile.close()
					break
	
				if (line == "\n"):
					continue # empty line
	
				# ignore anything that follows after a '#' as a comment 
				line        = line.partition('#')[0]
	
				# ignore empty lines
				if (len(line) == 0):
					continue
			
				line        = line.rstrip()
				lineArgs    = line.split()
	
				if   (lineArgs[0] == 'Atoms'):
					self.__read_Atoms(DataFile)
				elif (lineArgs[0] == 'Bonds'):
					self.__read_Bonds(DataFile)
				elif (lineArgs[0] == 'Angles'):
					self.__read_Angles(DataFile)
				else:
					sys.exit('data_lammps.__init__ : ERROR - Unexpected keyword %s in DataFile' %lineArgs[0])

				
	def __read_generalInfo(self,DataFile):
		line = DataFile.readline() # empty line
		line = DataFile.readline() # empty line

		line         = DataFile.readline()
		self.NAtoms  = int(clean_and_split(line)[0])

		line         = DataFile.readline()
		self.NBonds  = int(clean_and_split(line)[0])

		line         = DataFile.readline()
		self.NAngles = int(clean_and_split(line)[0])

		line = DataFile.readline() # empty line

		line             = DataFile.readline()
		self.NAtomTypes  = int(clean_and_split(line)[0])

		line             = DataFile.readline()
		self.NBondTypes  = int(clean_and_split(line)[0])

		line             = DataFile.readline()
		self.NAngleTypes = int(clean_and_split(line)[0])

		line = DataFile.readline() # empty line

		line             = DataFile.readline()
		lineArgs         = clean_and_split(line)
		self.Box_lo[0]   = float(lineArgs[0])
		self.Box_hi[0]   = float(lineArgs[1])

		line             = DataFile.readline()
		lineArgs         = clean_and_split(line)
		self.Box_lo[1]   = float(lineArgs[0])
		self.Box_hi[1]   = float(lineArgs[1])

		line             = DataFile.readline()
		lineArgs         = clean_and_split(line)
		self.Box_lo[2]   = float(lineArgs[0])
		self.Box_hi[2]   = float(lineArgs[1])	


	def __read_Atoms(self,DataFile):
		line    = DataFile.readline() # empty line
		self.At = []

		for iAt in range(0,self.NAtoms):
			line     = DataFile.readline()
			lineArgs = clean_and_split(line)

			idx      = int(lineArgs[0])-1
			iSpc     = int(lineArgs[1])-1
			Type     = int(lineArgs[2])-1
			charge   = float(lineArgs[3])
			xyz      = [float(r) for r in lineArgs[4:7]] 

			if (len(lineArgs) > 7):
				# we read the image flags as well
				Imag = [int(i) for i in lineArgs[7:]]
			else:
				Imag = np.zeros(3,np.integer)


			AtomIn   = atom(idx, iSpc, Type, charge, xyz, Imag)

			self.At.append(AtomIn)


	def __read_Bonds(self,DataFile):
		line     = DataFile.readline() # empty line
		self.Bnd = []

		for iBnd in range(0,self.NBonds):
			line     = DataFile.readline()
			lineArgs = clean_and_split(line)

			idx      = int(lineArgs[0])-1
			Type     = int(lineArgs[1])-1
			Atoms    = [int(i) for i in lineArgs[2:]] 

			BondIn   = bond(idx, Type, Atoms)

			self.Bnd.append(BondIn)


	def __read_Angles(self,DataFile):
		line     = DataFile.readline() # empty line
		self.Ang = []

		for iAng in range(0,self.NAngles):
			line     = DataFile.readline()
			lineArgs = clean_and_split(line)

			idx      = int(lineArgs[0])-1
			Type     = int(lineArgs[1])-1
			Atoms    = [int(i) for i in lineArgs[2:]] 

			AngleIn  = angle(idx, Type, Atoms)

			self.Ang.append(AngleIn)


	def write(self,DataFilePath):
		DataFile = open(DataFilePath, "w")

		DataFile.write("LAMMPS 'data.' description - generated by ee_lammps v1.xx \n")
		DataFile.write("\n")

		self.__write_generalInfo(DataFile)
		self.__write_Atoms(DataFile)
		self.__write_Bonds(DataFile)
		self.__write_Angles(DataFile)


	def __write_generalInfo(self,DataFile):
		DataFile.write("%8d atoms\n"  %self.NAtoms)
		DataFile.write("%8d bonds\n"  %self.NBonds)
		DataFile.write("%8d angles\n" %self.NAngles)
		DataFile.write("\n")

		DataFile.write("%8d atom types\n"  %self.NAtomTypes)
		DataFile.write("%8d bond types\n"  %self.NBondTypes)
		DataFile.write("%8d angle types\n" %self.NAngleTypes)
		DataFile.write("\n")

		DataFile.write("%8g %8g xlo xhi\n" %(self.Box_lo[0], self.Box_hi[0]) )
		DataFile.write("%8g %8g ylo yhi\n" %(self.Box_lo[1], self.Box_hi[1]) )
		DataFile.write("%8g %8g zlo zhi\n" %(self.Box_lo[2], self.Box_hi[2]) )
		DataFile.write("\n")

	def __write_Atoms(self,DataFile):
		DataFile.write("Atoms\n")
		DataFile.write("\n")

		for At in self.At:
			DataFile.write("%8d %8d %8d %12.4f %12.5f %12.5f %12.5f\n"    \
	         %( At.idx+1, At.iSpc+1, At.Type+1, At.charge,\
	            At.xyz[0], At.xyz[1], At.xyz[2] ) )
			
		DataFile.write("\n")


	def __write_Bonds(self,DataFile):
		DataFile.write("Bonds\n")
		DataFile.write("\n")

		for Bnd in self.Bnd:
			DataFile.write("%8d %8d %8d %8d\n" %(Bnd.idx+1, Bnd.Type+1, Bnd.At[0], Bnd.At[1]))

		DataFile.write("\n")


	def __write_Angles(self,DataFile):
		DataFile.write("Angles\n")
		DataFile.write("\n")

		for Ang in self.Ang:
			DataFile.write("%8d %8d %8d %8d %8d\n" %(Ang.idx+1, Ang.Type+1, Ang.At[0], Ang.At[1], Ang.At[2]))

		DataFile.write("\n")		



def data_to_molecule(data: data_lammps):
	"""
	Creates a molecule provided a data_lammps object.
	Note that the the data_lammps must only contain
	one species. In the case of an atom the function 
	will return an error.
	"""
	if (not data.NBonds > 1):
		sys.exit('data_to_molecule : ERROR - This function only works for data with bonds')

	Atoms = []

	iSpc  = data.At[0].iSpc

	for iAt in range(0, data.NAtoms):
		At = data.At[iAt]
		if (At.iSpc != iSpc):
			sys.exit('data_to_molecule : ERROR - This function only works for data with atoms belonging to a single molecule')

		Atoms.append(At)

	Bonds  = deepcopy(data.Bnd)
	Angles = deepcopy(data.Ang)

	return molecule(iSpc, Atoms, Bonds, Angles) 





def Mol_System_to_data(MolSys: Mol_System):
	"""
	Creates a data_lammps object from a given Mol_System. 
	The data_lammps obj can later be printed into a file
	using the function data_lammps.write(Path)
	"""
	Data = data_lammps('')

	Data.NAtoms      = MolSys.NAtoms     
	Data.NBonds      = MolSys.NBonds     
	Data.NAngles     = MolSys.NAngles    
	Data.NAtomTypes  = MolSys.NAtomTypes 
	Data.NBondTypes  = MolSys.NBondTypes 
	Data.NAngleTypes = MolSys.NAngleTypes
	Data.Box_lo      = np.zeros(3,np.double) 
	Data.Box_hi      = np.copy(MolSys.Box.edge)    
	Data.At          = deepcopy(MolSys.At)         
	Data.Bnd         = deepcopy(MolSys.Bnd)        
	Data.Ang         = deepcopy(MolSys.Ang)  

	return Data   
	








